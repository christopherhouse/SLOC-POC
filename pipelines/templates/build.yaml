parameters:
- name: dependencyName
  type: string

jobs:
- job: Build
  displayName: 'Build and publish infrastructure artifacts'
  dependsOn: ${{ parameters.dependencyName }}
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    mainBicepPath: '$(System.DefaultWorkingDirectory)/infrastructure/bicep/main.bicep'
    bicepParameterFilesPath: '$(System.DefaultWorkingDirectory)/infrastructure/bicep/parameters'
    bicepArtifactsPath: '$(System.DefaultWorkingDirectory)/infrastructure/bicep'
  steps:
  - task: Bash@3
    displayName: 'Build Bicep templates'
    inputs:
      targetType: 'inline'
      script: |
        echo 'Building main bicep template'
        bicep build $(mainBicepPath)
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Bicep templates and parameters'
    inputs:
      targetPath: $(bicepArtifactsPath)
      artifact: 'bicep-artifacts'
      publishLocation: 'pipeline'
  
  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet packages for Function App'
    inputs:
      command: 'restore'
      projects: 'functions/FunctionApp1/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build Function App'
    inputs:
      command: 'build'
      projects: 'functions/FunctionApp1/*.csproj'
      arguments: '--configuration Release'

  - task: DotNetCoreCLI@2
    displayName: 'Publish Function App'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: 'functions/FunctionApp1/*.csproj'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/functionapp'
      zipAfterPublish: true

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Function App as pipeline artifact'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/functionapp'
      artifact: 'function-app-artifact'
      publishLocation: 'pipeline'